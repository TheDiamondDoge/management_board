{"version":3,"sources":["components/controls/select-list/select-list.js","components/formik-custom-field/formik-custom-field.module.scss","components/controls/select-list/select-list.module.scss","components/formik-select-list.js","components/formik-custom-field/formik-custom-field.js","components/test_comps/world.module.scss","components/test_comps/world.js"],"names":["SelectList","props","_this","Object","C_Users_TheDiamondDoge_IdeaProjects_react_learning_pmboard_gui_bp3_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","C_Users_TheDiamondDoge_IdeaProjects_react_learning_pmboard_gui_bp3_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_TheDiamondDoge_IdeaProjects_react_learning_pmboard_gui_bp3_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","label","empty","_this2","_this$props","onItemSelect","onRemove","other","C_Users_TheDiamondDoge_IdeaProjects_react_learning_pmboard_gui_bp3_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","items","selectedItems","otherProps","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_blueprintjs_select__WEBPACK_IMPORTED_MODULE_8__","assign","itemListPredicate","inputVal","itemArr","filter","item","String","toLowerCase","includes","itemRenderer","_ref","handleClick","key","value","text","emptyToNone","isActive","getObjByLabel","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_7__","onClick","active","noResults","disabled","tagRenderer","tagInputProps","objToRemove","popoverProps","popoverClassName","styles","container","i","length","React","Component","defaultProps","module","exports","error","no_margin","FormikSelectList","react_default","select_list","FormikCustomField","classCallCheck","possibleConstructorReturn","getPrototypeOf","fieldFactory","type","field","values","arguments","undefined","components","fill","date","transformDateForInput","_this$state$dateRange","dateRange","min","max","dateInput","formatDate","dateFormatToString","parseDate","str","stringToDateFormat","toString","maxDate","minDate","allowNumericCharactersOnly","buttonPosition","className","defaultChecked","inline","formik_esm","component","map","obj","onChange","name","restField","objectWithoutProperties","lib_default","Date","_this$props$form","form","touched","errors","touchedValue","getPropFromStringPath","errorsValue","World","addElement","elem","setState","prevState","concat","C_Users_TheDiamondDoge_IdeaProjects_react_learning_pmboard_gui_bp3_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","deleteElement","e","isSelected","onDismiss","isDismissed","id","newToasts","toasts","toast","addToast","isShown","isDialog","quill","window","history","pushState","test","testPassed","onClick1","onClick2","menu","_blueprintjs_core__WEBPACK_IMPORTED_MODULE_9__","icon","Fragment","style","width","height","border","isOpen","title","_loading_spinner_loading_spinner__WEBPACK_IMPORTED_MODULE_15__","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","exact","to","x","console","log","target","_blueprintjs_select__WEBPACK_IMPORTED_MODULE_12__","q","w","formik__WEBPACK_IMPORTED_MODULE_8__","onSubmit","b","initialValues","semail","render","onOpening","alert","react_rnd__WEBPACK_IMPORTED_MODULE_14__","backgroundColor","position","display","alignItems","justifyContent","disableDragging","content","Position","RIGHT_BOTTOM","minimal","message","timeout","intent","Intent","SUCCESS","DANGER"],"mappings":"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","file":"static/js/7.b96d912d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {MenuItem} from \"@blueprintjs/core\";\r\nimport {MultiSelect} from \"@blueprintjs/select\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./select-list.module.scss\";\r\n\r\n//TODO: Idea => If more than 2-3 elems selected - change them on \"# selected\". Add x button to each elem in list\r\nexport default class SelectList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            label: {\r\n                empty: \"(none)\"\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {onItemSelect, onRemove, ...other} = this.props;\r\n        let {items, selectedItems, ...otherProps} = other;\r\n        items = items ? items : [];\r\n        selectedItems = selectedItems ? selectedItems : [];\r\n\r\n        return (\r\n            <MultiSelect\r\n                {...otherProps}\r\n                items={items}\r\n                itemListPredicate={(inputVal, itemArr) => {\r\n                    return itemArr.filter(item => String(item.label).toLowerCase().includes(inputVal.toLowerCase()))\r\n                }}\r\n                itemRenderer={(item, {handleClick}) => {\r\n                    const key = item.value;\r\n                    const text = this.emptyToNone(item.label);\r\n                    const isActive = this.getObjByLabel(item.label) || false;\r\n                    return (\r\n                        <MenuItem\r\n                            key={key}\r\n                            text={text}\r\n                            onClick={handleClick}\r\n                            active={isActive}\r\n                        />\r\n                    )\r\n                }\r\n                }\r\n                selectedItems={selectedItems}\r\n                onItemSelect={onItemSelect}\r\n                noResults={<MenuItem disabled text=\"No results.\" />}\r\n                tagRenderer={item => this.emptyToNone(item.label)}\r\n                tagInputProps={{\r\n                    onRemove: (label) => {\r\n                        const objToRemove = this.getObjByLabel(label);\r\n                        return onRemove(objToRemove);\r\n                    }\r\n                }}\r\n                popoverProps={{\r\n                    popoverClassName: styles.container\r\n                }}\r\n            />\r\n        );\r\n    }\r\n\r\n    getObjByLabel(label) {\r\n        const {empty} = this.state.label;\r\n        label = label === empty ? \"\" : label;\r\n        const selectedItems = this.props.selectedItems || [];\r\n        for (let i = 0; i < selectedItems.length; i++) {\r\n            if (String(selectedItems[i].label) === String(label)) {\r\n                return selectedItems[i];\r\n            }\r\n        }\r\n    }\r\n\r\n    emptyToNone(label) {\r\n        const {empty} = this.state.label;\r\n        if (label) {\r\n            return label\r\n        } else if (label === 0) {\r\n            return String(label)\r\n        } else {\r\n            return empty;\r\n        }\r\n    }\r\n}\r\n\r\n// PropTypes.any in order to handle nulls\r\nSelectList.propTypes = {\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string, PropTypes.bool, PropTypes.number, PropTypes.any\r\n        ]),\r\n        label: PropTypes.oneOfType([\r\n            PropTypes.string, PropTypes.bool, PropTypes.number, PropTypes.any\r\n        ])\r\n    })),\r\n    selectedItems: PropTypes.arrayOf(PropTypes.any),\r\n    onItemSelect: PropTypes.func,\r\n    onRemove: PropTypes.func\r\n};\r\n\r\nSelectList.defaultProps = {\r\n    items: [],\r\n    selectedItems: [],\r\n    onItemSelect: () => {},\r\n    onRemove: () => {}\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"formik-custom-field_error__1BGLP\",\"no_margin\":\"formik-custom-field_no_margin__YIKIn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"select-list_container__-ZvXi\"};","import React from 'react';\r\nimport SelectList from \"./controls/select-list/select-list\";\r\n\r\n//TODO: add <div> for errors\r\n//TODO: Is this actually needed?\r\nexport default function FormikSelectList (props) {\r\n    return <SelectList {...props}/>\r\n}\r\n\r\nFormikSelectList.propTypes = {\r\n};","import React from 'react';\r\nimport {TextArea, InputGroup, Checkbox, NumericInput} from \"@blueprintjs/core\";\r\nimport {DateInput} from \"@blueprintjs/datetime\";\r\nimport {dateFormatToString, stringToDateFormat, transformDateForInput} from \"../../util/transform-funcs\";\r\nimport {getPropFromStringPath} from \"../../util/util\";\r\nimport styles from \"./formik-custom-field.module.scss\";\r\nimport {Field} from \"formik\";\r\nimport PropTypes from \"prop-types\";\r\nimport FormikSelectList from \"../formik-select-list\";\r\nimport ReactQuill from \"react-quill\";\r\n\r\nexport default class FormikCustomField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            dateRange: {\r\n                min: new Date(\"1900-01-01\"),\r\n                max: new Date(\"2040-01-01\")\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        if (!(this.props === undefined)) {\r\n            const {field, form: {touched, errors}, type, values, ...props} = this.props;\r\n            const touchedValue = getPropFromStringPath(touched, field.name);\r\n            const errorsValue = getPropFromStringPath(errors, field.name);\r\n\r\n            return (\r\n                <div>\r\n                    {this.fieldFactory(type, field, props, values)}\r\n                    {touchedValue && errorsValue &&\r\n                    <div className={styles.error}>{errorsValue}</div>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div>\r\n                    {this.fieldFactory(\"text\", null, null)}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    fieldFactory = (type, field, props, values = []) => {\r\n        type = type || \"\";\r\n        switch (type.toLowerCase()) {\r\n            case \"textarea\":\r\n                return (<TextArea fill {...field} {...props} />);\r\n            case \"date\":\r\n                const date = transformDateForInput(field.value);\r\n                const {min, max} = this.state.dateRange;\r\n                return (\r\n                    <DateInput formatDate={date => dateFormatToString(date)}\r\n                               parseDate={str => stringToDateFormat(str.toString())}\r\n                               maxDate={max}\r\n                               minDate={min}\r\n                               {...field} {...props}\r\n                               value={date}\r\n                    />\r\n                );\r\n            case \"numeric\":\r\n                return (\r\n                    //onValueChange handler should be passed instead of onChange\r\n                    <NumericInput allowNumericCharactersOnly\r\n                                  fill\r\n                                  buttonPosition=\"none\"\r\n                                  {...field} {...props}\r\n\r\n                    />\r\n                );\r\n            case \"checkbox\":\r\n                return (\r\n                    <Checkbox\r\n                        className={styles.no_margin}\r\n                        defaultChecked={field.value}\r\n                        inline\r\n                        {...field} {...props}\r\n                    />\r\n                );\r\n            case \"select\":\r\n                return (\r\n                    <Field component=\"select\" {...field} {...props}>\r\n                        {values.map((obj) => {\r\n                            const {label, value} = obj;\r\n                            return (\r\n                                <option\r\n                                    key={label}\r\n                                    value={value}\r\n                                >\r\n                                    {label}\r\n                                </option>\r\n                            )\r\n                        })}\r\n                    </Field>\r\n                );\r\n            case \"multiselect\":\r\n                return (\r\n                    <FormikSelectList {...props} {...field}/>\r\n                );\r\n            case \"quill\":\r\n                const {value, onChange, name, ...restField} = field;\r\n                return (\r\n                    <ReactQuill\r\n                        {...props}\r\n                        {...restField}\r\n                        value={value}\r\n                        onChange={onChange(name)}\r\n                    />\r\n                );\r\n            case \"text\":\r\n            default:\r\n                return (<InputGroup {...field} {...props} />);\r\n        }\r\n    };\r\n}\r\n\r\nFormikCustomField.propTypes = {\r\n    //Main props\r\n    field: PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        value: PropTypes.any\r\n    }),\r\n    form: PropTypes.shape({\r\n        touched: PropTypes.object.isRequired,\r\n        errors: PropTypes.object.isRequired,\r\n    }),\r\n    type: PropTypes.string,\r\n\r\n    //numeric specific props\r\n    onValueChange: PropTypes.func,\r\n\r\n    //select specific props\r\n    values: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            value: PropTypes.oneOfType([\r\n                PropTypes.string,\r\n                PropTypes.number,\r\n                PropTypes.bool\r\n            ]).isRequired,\r\n            label: PropTypes.string.isRequired\r\n        })\r\n    ),\r\n\r\n    //multiselect specific props\r\n    items: PropTypes.arrayOf(PropTypes.shape({\r\n        value: PropTypes.oneOfType([\r\n            PropTypes.string, PropTypes.bool, PropTypes.number\r\n        ]).isRequired,\r\n        label: PropTypes.oneOfType([\r\n            PropTypes.string, PropTypes.bool, PropTypes.number\r\n        ]).isRequired\r\n    })),\r\n    selectedItems: PropTypes.arrayOf(PropTypes.any),\r\n    onItemSelect: PropTypes.func,\r\n    onRemove: PropTypes.func\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"world_container__2Wa08\"};","import React from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types';\r\nimport {Formik, Field, Form, ErrorMessage} from \"formik\";\r\nimport {\r\n    HTMLTable,\r\n    MenuItem,\r\n    Popover,\r\n    Position,\r\n    Button,\r\n    Menu,\r\n    Dialog,\r\n    Intent,\r\n    Toast,\r\n    Toaster,\r\n    NumericInput\r\n} from \"@blueprintjs/core\";\r\nimport {MultiSelect} from \"@blueprintjs/select\";\r\nimport FormikCustomField from \"../formik-custom-field/formik-custom-field\";\r\nimport {Rnd} from \"react-rnd\";\r\nimport LoadingSpinner from \"../loading-spinner/loading-spinner\";\r\nimport styles from \"./world.module.scss\";\r\n\r\nimport 'react-quill/dist/quill.snow.css';\r\nimport 'react-quill/dist/quill.bubble.css';\r\nimport 'react-quill/dist/quill.core.css';\r\n\r\n\r\nexport default class World extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            selectedItems: [\"Hi\", \"I\", \"am\", \"Robert\"],\r\n            isDialog: false,\r\n            quill: \"<h1>Hell-0</h1>\",\r\n            toasts: [\r\n                {id: 1, name: \"Hello\", isShown: true},\r\n                {id: 2, name: \"this\", isShown: true},\r\n                {id: 3, name: \"is\", isShown: true},\r\n                {id: 4, name: \"toast\", isShown: true},\r\n            ]\r\n        }\r\n    }\r\n\r\n    addElement = (elem) => {\r\n        this.setState((prevState) => {\r\n            if (!prevState.selectedItems.includes(elem)) {\r\n                return {\r\n                    selectedItems: [...prevState.selectedItems, elem]\r\n                }\r\n            }\r\n        })\r\n    };\r\n\r\n    deleteElement = (elem) => {\r\n        this.setState((prevState) => ({\r\n            selectedItems: prevState.selectedItems.filter((e) => (e !== elem))\r\n        }));\r\n    };\r\n\r\n    isSelected = (elem) => (this.state.selectedItems.includes(elem));\r\n\r\n    test() {\r\n        // document.getElementById(\"content\").innerHTML = response.html;\r\n        // document.title = response.pageTitle;\r\n        window.history.pushState(\"Hello\", \"Title\", \"/pws?tab=information\");\r\n    }\r\n\r\n    render() {\r\n        const {test, testPassed, onClick1, onClick2} = this.props;\r\n        const menu = (\r\n            <Menu>\r\n                <MenuItem text={\"Sort by Asc\"} icon={\"sort-asc\"}/>\r\n                <MenuItem text={\"Sort by Desc\"} icon={\"sort-desc\"}/>\r\n            </Menu>\r\n        );\r\n\r\n        return (\r\n            <>\r\n                <div style={{width: 100, height: 100, border: \"1px solid black\"}}>\r\n                    <Dialog\r\n                        isOpen={this.state.isDialog}\r\n                        title=\"Test\"\r\n                    >\r\n                        Yo!\r\n                    </Dialog>\r\n                </div>\r\n                <LoadingSpinner/>\r\n                <NavLink exact to=\"/pws?projectId=1\">\r\n                    <button>PWS</button>\r\n                </NavLink>\r\n                <div>\r\n                    {test} <br/>\r\n                    {testPassed} <br/>\r\n                    <button onClick={onClick1}>1</button>\r\n                    <button onClick={onClick2}>2</button>\r\n\r\n                </div>\r\n                <input onChange={(x) => (console.log(x.target.value))}/>\r\n                <br/>\r\n\r\n                <MultiSelect\r\n                    items={[{name: \"A\", id: 1}, {name: \"B\", id: 2}, {name: \"C\", id: 3}]}\r\n                    itemListPredicate={(q, w) => {\r\n                        return w.filter(item => item.name.toLowerCase().includes(q.toLowerCase()))\r\n                    }}\r\n                    itemRenderer={(item, x) => {\r\n                        // console.log(x);\r\n                        const {handleClick} = x;\r\n                        return (\r\n                            <MenuItem\r\n                                key={item.id}\r\n                                text={item.name}\r\n                                onClick={handleClick}\r\n                                active={this.isSelected(item)}\r\n                            />\r\n                        )\r\n                    }\r\n                    }\r\n                    selectedItems={this.state.selectedItems}\r\n                    onItemSelect={(elem) => {\r\n                        this.addElement(elem)\r\n                    }}\r\n                    tagRenderer={item => item}\r\n                    tagInputProps={{\r\n                        onRemove: (item) => {\r\n                            this.deleteElement(item)\r\n                        }\r\n                    }}\r\n\r\n                />\r\n\r\n                <Formik\r\n                    onSubmit={(e, b) => {\r\n                        console.log(e);\r\n                        console.log(b);\r\n                    }\r\n                    }\r\n                    initialValues={{date: new Date(), semail: {test: \"heheh@mail.ru\"}}}\r\n                    render={\r\n                        () => (\r\n                            <Form>\r\n                                <HTMLTable>\r\n                                    <tbody>\r\n                                    <tr>\r\n                                        <td>\r\n                                            <Field type=\"date\" name=\"date\" component={FormikCustomField}/>\r\n                                            <ErrorMessage name=\"email\" component=\"div\"/>\r\n                                        </td>\r\n                                        <td>\r\n                                            <Field type=\"email\" name=\"semail.test\"/>\r\n                                            <ErrorMessage name=\"semail.test\" component=\"div\"/>\r\n                                        </td>\r\n                                        <td>\r\n\r\n                                            <MultiSelect\r\n                                                name={\"selector\"}\r\n                                                items={[{name: \"A\", id: 1}, {name: \"B\", id: 2}, {name: \"C\", id: 3}]}\r\n                                                itemRenderer={(item, {handleClick}) =>\r\n                                                    <MenuItem\r\n                                                        key={item.id}\r\n                                                        text={item.name}\r\n                                                        onClick={handleClick}\r\n                                                        active={this.isSelected(item)}\r\n                                                    />\r\n                                                }\r\n                                                selectedItems={this.state.selectedItems}\r\n                                                onItemSelect={(elem) => {\r\n                                                    this.addElement(elem)\r\n                                                }}\r\n                                                tagRenderer={item => item}\r\n                                                tagInputProps={{\r\n                                                    onRemove: (item) => {\r\n                                                        this.deleteElement(item)\r\n                                                    }\r\n                                                }}\r\n                                                popoverProps={{\r\n                                                    onOpening: () => alert(1234),\r\n                                                    popoverClassName: styles.container,\r\n                                                }}\r\n                                            />\r\n                                        </td>\r\n                                        <td>\r\n                                            <button type=\"submit\">Submit</button>\r\n                                        </td>\r\n                                    </tr>\r\n                                    </tbody>\r\n                                </HTMLTable>\r\n                            </Form>\r\n                        )\r\n                    }\r\n                />\r\n                <HTMLTable>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>\r\n                            <Rnd\r\n                                style={{\r\n                                    backgroundColor: \"red\", position: \"relative\", width: \"100%\",\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"center\"\r\n                                }}\r\n                                disableDragging\r\n                                // enableResizing={{right: true}}\r\n                            >\r\n                                1\r\n                            </Rnd>\r\n                        </td>\r\n                        <td>1</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>2</td>\r\n                        <td>2</td>\r\n                    </tr>\r\n                    </tbody>\r\n                </HTMLTable>\r\n                <Popover content={menu} position={Position.RIGHT_BOTTOM}>\r\n                    <Button icon={\"sort\"} minimal/>\r\n                </Popover>\r\n                <br/>\r\n                <Toaster>\r\n                    {this.state.toasts.map((toast) =>\r\n                        toast.isShown &&\r\n                        <Toast\r\n                            id={toast.id}\r\n                            message={toast.name}\r\n                            timeout={1000 * toast.id}\r\n                            intent={Intent.SUCCESS}\r\n                            onDismiss={(q) => this.onDismiss(q, toast.id)}\r\n                        />\r\n                    )}\r\n                </Toaster>\r\n                <br/>\r\n                <br/>\r\n                <Button intent={Intent.DANGER} text={\"Lol\"} onClick={this.addToast}/>\r\n                <br/>\r\n                <NumericInput allowNumericCharactersOnly/>\r\n            </>\r\n        );\r\n    }\r\n\r\n    onDismiss = (isDismissed, id) => {\r\n        this.setState((prevState) => {\r\n            let newToasts = [...prevState.toasts];\r\n            newToasts = newToasts.filter(toast => toast.id !== id);\r\n            return {\r\n                toasts: [...newToasts]\r\n            }\r\n        })\r\n    };\r\n\r\n    addToast = () => {\r\n        this.setState((prevState) => ({\r\n            toasts: [...prevState.toasts, {id: \"14\", name: \"Ya-ya\", isShown: true}]\r\n        }));\r\n    }\r\n}\r\n\r\nWorld.propTypes = {\r\n    test: PropTypes.bool,\r\n    testPassed: PropTypes.bool,\r\n    onClick1: PropTypes.func,\r\n    onClick2: PropTypes.func,\r\n};\r\n"],"sourceRoot":""}